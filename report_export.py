import os
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext

from keyboards import *
from export_requests import export_requests_to_excel
from states import StatisticsStates, UserStates
from work_database import get_user_data


async def handle_statistics(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await state.set_state(StatisticsStates.waiting_for_statistics_choice)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:",
        reply_markup=statistics_selection_menu()
    )


async def handle_statistics_today(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    await state.set_state(StatisticsStates.showing_today_statistics)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
    file_path = export_requests_to_excel(filter_type="today")

    if file_path is None:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        await state.set_state(StatisticsStates.waiting_for_statistics_choice)
        return

    user_data_base = get_user_data(message.from_user.id)
    reply_markup = main_menu_users() if user_data_base['role'] == 'user' else main_menu_admins()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(document=FSInputFile(file_path, filename="statistic_today.xlsx"),
                                  caption="–í–∞—à —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º", reply_markup=reply_markup)

    os.remove(file_path)

    await state.set_state(UserStates.main_dialog)


async def handle_statistics_all_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
    await state.set_state(StatisticsStates.showing_all_time_statistics)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
    file_path = export_requests_to_excel(filter_type="all_time")

    if file_path is None:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.")
        await state.set_state(StatisticsStates.waiting_for_statistics_choice)
        return

    user_data_base = get_user_data(message.from_user.id)
    reply_markup = main_menu_users() if user_data_base['role'] == 'user' else main_menu_admins()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(document=FSInputFile(file_path, filename="statistic_all_time.xlsx"),
                                  caption="–í–∞—à —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º", reply_markup=reply_markup)

    os.remove(file_path)

    await state.set_state(UserStates.main_dialog)


async def handle_back_to_admin_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üîô –ù–∞–∑–∞–¥'"""
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UserStates.main_dialog)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_admins()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    )
